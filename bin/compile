#!/bin/sh
set -e

echo "DEBUG: HEROKUISH_SETUIDGUID='$HEROKUISH_SETUIDGUID'"
echo "DEBUG: Running as UID=$(id -u) user=$(id -un)"

echo "==> Setting up PostgreSQL focal archive APT source (non-root approach)"

# Use user-writable locations instead of system directories
BUILDPACK_DIR="/tmp/postgresql-buildpack"
GPG_KEY_DIR="$BUILDPACK_DIR/gpg"

# Create our working directories
mkdir -p "$GPG_KEY_DIR"

echo "Using buildpack directories:"
echo "  GPG Key: $GPG_KEY_DIR"

# Download PostgreSQL GPG key to our buildpack directory
echo "Downloading PostgreSQL GPG key..."
if ! curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc \
  -o "$GPG_KEY_DIR/apt.postgresql.org.asc"; then
    echo "Warning: Failed to download GPG key via curl, trying wget..."
    if command -v wget >/dev/null 2>&1; then
        wget -qO "$GPG_KEY_DIR/apt.postgresql.org.asc" \
          https://www.postgresql.org/media/keys/ACCC4CF8.asc
    else
        echo "Error: Neither curl nor wget available"
        exit 1
    fi
fi

# Verify the GPG key was downloaded
if [ ! -f "$GPG_KEY_DIR/apt.postgresql.org.asc" ] || [ ! -s "$GPG_KEY_DIR/apt.postgresql.org.asc" ]; then
    echo "Error: GPG key file is missing or empty"
    exit 1
fi

echo "GPG key downloaded successfully: $(ls -la "$GPG_KEY_DIR/apt.postgresql.org.asc")"

# Set environment variables that can be used by subsequent buildpacks
export POSTGRESQL_GPG_KEY_PATH="$GPG_KEY_DIR/apt.postgresql.org.asc"
export POSTGRESQL_ARCHIVE_ENABLED="true"

# Create a custom APT configuration that will override the problematic repository
echo "Creating custom APT configuration..."
cat > "$BUILDPACK_DIR/apt.conf" << 'EOF'
# Custom APT configuration to handle PostgreSQL repository override
Acquire::Check-Valid-Until "false";
Acquire::Check-Date "false";

# Disable the problematic PostgreSQL repository
APT::Get::AllowUnauthenticated "false";
APT::Get::AllowDowngrade "false";

# Set custom sources list that excludes the problematic repository
Dir::Etc::sourcelist "/tmp/postgresql-buildpack/sources.list.clean";
EOF

# Create a clean sources.list that excludes the problematic repository
echo "Creating clean sources.list..."
if [ -f /etc/apt/sources.list ]; then
    # Create a clean sources.list without the problematic entry
    grep -v "apt.postgresql.org" /etc/apt/sources.list > "$BUILDPACK_DIR/sources.list.clean"
    
    # Add our correct repository
    echo "deb [signed-by=$GPG_KEY_DIR/apt.postgresql.org.asc] https://apt-archive.postgresql.org/pub/repos/apt focal-pgdg-archive main" >> "$BUILDPACK_DIR/sources.list.clean"
    
    echo "Clean sources.list created:"
    cat "$BUILDPACK_DIR/sources.list.clean"
else
    echo "Warning: Cannot find /etc/apt/sources.list"
fi

# Create a script that will be executed by the APT buildpack
cat > "$BUILDPACK_DIR/fix-postgresql-repo.sh" << 'EOF'
#!/bin/sh
# Script to fix PostgreSQL repository issue

echo "==> Fixing PostgreSQL repository configuration"

# Set environment variables to use our custom APT configuration
export APT_CONFIG="$BUILDPACK_DIR/apt.conf"

# Check if we can write to system directories
if [ -w /etc/apt/sources.list.d ]; then
    echo "Creating PostgreSQL repository configuration..."
    
    # Copy GPG key to standard location if possible
    if [ -w /usr/share/postgresql-common/pgdg ]; then
        mkdir -p /usr/share/postgresql-common/pgdg
        cp "$POSTGRESQL_GPG_KEY_PATH" /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc
        GPG_KEY_PATH="/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc"
    else
        GPG_KEY_PATH="$POSTGRESQL_GPG_KEY_PATH"
    fi
    
    # Remove any existing problematic configurations
    rm -f /etc/apt/sources.list.d/pgdg.list
    
    # Add our configuration
    cat > /etc/apt/sources.list.d/pgdg.list << INNER_EOF
deb [signed-by=$GPG_KEY_PATH] https://apt-archive.postgresql.org/pub/repos/apt focal-pgdg-archive main
INNER_EOF
    
    echo "PostgreSQL repository configured successfully"
else
    echo "Warning: Cannot write to system APT directories"
    echo "Using custom APT configuration to override problematic repository"
fi
EOF

chmod +x "$BUILDPACK_DIR/fix-postgresql-repo.sh"

# Execute the fix script immediately
echo "==> Executing PostgreSQL repository fix..."
. "$BUILDPACK_DIR/fix-postgresql-repo.sh"

# Create environment variables that will be available to subsequent buildpacks
echo "Setting up environment for subsequent buildpacks..."
export APT_CONFIG="$BUILDPACK_DIR/apt.conf"
export APT_SOURCES_LIST="$BUILDPACK_DIR/sources.list.clean"

echo "==> PostgreSQL focal archive APT source configured successfully"
echo "==> Buildpack files available at: $BUILDPACK_DIR"
echo "==> Fix script: $BUILDPACK_DIR/fix-postgresql-repo.sh"
echo "==> APT config: $BUILDPACK_DIR/apt.conf"
echo "==> Clean sources.list: $BUILDPACK_DIR/sources.list.clean"